version: '3.8'

services:
  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: microservices-rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=adminpassword
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus
    container_name: microservices-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - microservices-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana
    container_name: microservices-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=adminpassword
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - microservices-network

  # System Manager
  system-manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: microservices-manager
    restart: unless-stopped
    command: ["node", "SystemManager.js"]
    environment:
      - BROKER_URL=amqp://admin:adminpassword@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - ./config:/usr/src/app/config

  # REST Worker
  rest-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: microservices-rest
    restart: unless-stopped
    command: ["node", "example/RESTWorker.js"]
    environment:
      - BROKER_URL=amqp://admin:adminpassword@rabbitmq:5672
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - ./config:/usr/src/app/config

  # Pilot Worker
  pilot-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: microservices-pilot
    restart: unless-stopped
    command: ["node", "example/PilotWorker.js"]
    environment:
      - BROKER_URL=amqp://admin:adminpassword@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - ./config:/usr/src/app/config

  # DB Worker
  db-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: microservices-db
    restart: unless-stopped
    command: ["node", "example/DBWorker.js"]
    environment:
      - BROKER_URL=amqp://admin:adminpassword@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - ./config:/usr/src/app/config

networks:
  microservices-network:
    driver: bridge

volumes:
  rabbitmq_data:
  prometheus_data:
  grafana_data: